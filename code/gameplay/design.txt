游戏分为 hud gameplay visual 三部分。

hud 负责交互
gameplay 负责数据逻辑
visual 负责显示

在 gameplay 中，工人和建筑都是 Actor 

Actor 是一个自治体:
1. actor 用 actor.new { name = "类型", 其它参数 } 创建。
	name 是必须项，目前有 building 和 worker
2. 每个 actor 有一个 id ，可以通过 self.id 获得。actor.new 也会返回。
3. 每个 tick 都会调用所有 actor:update() 。当 update 返回 true 时，actor 销毁自己。
4. 通过 actor.message(id, msg_name, ...) 可以向 id 发送消息。目前支持 msg_name = "flush" 消息 。
5. 通过 actor.publish(msg_name, ...) 向所有 actor 发送消息。

actor_xxx.lua 定义了不同 actor 的实现。例如，actor_worker.lua 定义了 worker 的实现。

todo: Actor 的持久化

building 指场景中的建筑，在创建时，它会创建 blueprint ，并通过 schedule 发布供应任务。当材料供应结束，删掉 blueprint 。

worker 是用来完成 building 任务的工人

worker update 在 idle 状态时会在 schedule 的所有任务中找一个离自己最近的，并把距离作为优先级向 schedule 请求任务。
schedule 在每个 tick 会对每个任务选出优先级最高的工人，将任务分配给他。
worker 被指定任务后，会切换到任务指定状态，开始执行 task 。
	
task 是由一个函数列表定义而成，每个函数是一个阶段。
	temp = task.define() 用来定义函数列表的模板。
	inst = temp:instance { 初始化参数 } 创建 task 实例，实例带有独立的环境。
	inst:update() 会依次执行函数列表上的函数，返回值：
		true 继续
		nil, err cancel
		false 完成
	inst:reset() 可以回到内部设置的上一个 checkpoint 重新执行。
	
	task 可以设置 checkpoint ，当外部环境变化时，通过 reset 回到 checkpoint 阶段重新执行。目前地图的变化会 reset 所有工人的 task 。
	
不同的 task 定义在 task_xxx.lua 中，例如 task_supply.lua 定义了 supply 的函数列表。


	
